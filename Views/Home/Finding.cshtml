<head>
    <meta name="viewport" content="width=device-width" />
    <title>Finding...</title>
    
	<link href="~/css/finding.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            height: 100vh;
            margin: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        body {
            background: #00b4ff;
            color: #333;
            font: 100% Arial, Sans Serif;
            height: 100vh;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        #background-wrap {
            bottom: 0;
            left: 0;
            padding-top: 50px;
            position: fixed;
            right: 0;
            top: 0;
            z-index: -1;
        }

        /* KEYFRAMES */

        @@-webkit-keyframes animateCloud {
            0% {
                margin-left: -1000px;
            }

            100% {
                margin-left: 100%;
            }
        }

        @@-moz-keyframes animateCloud {
            0% {
                margin-left: -1000px;
            }

            100% {
                margin-left: 100%;
            }
        }

        @@keyframes animateCloud {
            0% {
                margin-left: -1000px;
            }

            100% {
                margin-left: 100%;
            }
        }

        /* ANIMATIONS */

        .x1 {
            -webkit-animation: animateCloud 35s linear infinite;
            -moz-animation: animateCloud 35s linear infinite;
            animation: animateCloud 35s linear infinite;
            -webkit-transform: scale(0.65);
            -moz-transform: scale(0.65);
            transform: scale(0.65);
        }

        .x2 {
            -webkit-animation: animateCloud 20s linear infinite;
            -moz-animation: animateCloud 20s linear infinite;
            animation: animateCloud 20s linear infinite;
            -webkit-transform: scale(0.3);
            -moz-transform: scale(0.3);
            transform: scale(0.3);
        }

        .x3 {
            -webkit-animation: animateCloud 30s linear infinite;
            -moz-animation: animateCloud 30s linear infinite;
            animation: animateCloud 30s linear infinite;
            -webkit-transform: scale(0.5);
            -moz-transform: scale(0.5);
            transform: scale(0.5);
        }

        .x4 {
            -webkit-animation: animateCloud 18s linear infinite;
            -moz-animation: animateCloud 18s linear infinite;
            animation: animateCloud 18s linear infinite;
            -webkit-transform: scale(0.4);
            -moz-transform: scale(0.4);
            transform: scale(0.4);
        }

        .x5 {
            -webkit-animation: animateCloud 25s linear infinite;
            -moz-animation: animateCloud 25s linear infinite;
            animation: animateCloud 25s linear infinite;
            -webkit-transform: scale(0.55);
            -moz-transform: scale(0.55);
            transform: scale(0.55);
        }

        /* OBJECTS */

        .cloud {
            background: #fff;
            background: -moz-linear-gradient(top, #fff 5%, #f1f1f1 100%);
            background: -webkit-gradient(linear, left top, left bottom, color-stop(5%,#fff), color-stop(100%,#f1f1f1));
            background: -webkit-linear-gradient(top, #fff 5%,#f1f1f1 100%);
            background: -o-linear-gradient(top, #fff 5%,#f1f1f1 100%);
            background: -ms-linear-gradient(top, #fff 5%,#f1f1f1 100%);
            background: linear-gradient(top, #fff 5%,#f1f1f1 100%);
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fff', endColorstr='#f1f1f1',GradientType=0 );
            -webkit-border-radius: 100px;
            -moz-border-radius: 100px;
            border-radius: 100px;
            -webkit-box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);
            -moz-box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);
            box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);
            height: 120px;
            position: relative;
            width: 350px;
        }

            .cloud:after, .cloud:before {
                background: #fff;
                content: '';
                position: absolute;
                z-indeX: -1;
            }

            .cloud:after {
                -webkit-border-radius: 100px;
                -moz-border-radius: 100px;
                border-radius: 100px;
                height: 100px;
                left: 50px;
                top: -50px;
                width: 100px;
            }

            .cloud:before {
                -webkit-border-radius: 200px;
                -moz-border-radius: 200px;
                border-radius: 200px;
                width: 180px;
                height: 180px;
                right: 50px;
                top: -90px;
            }

    </style>
</head>
<body>
    <div id="background-wrap">
        <div class="x1">
            <div class="cloud"></div>
        </div>

        <div class="x2">
            <div class="cloud"></div>
        </div>

        <div class="x3">
            <div class="cloud"></div>
        </div>

        <div class="x4">
            <div class="cloud"></div>
        </div>

        <div class="x5">
            <div class="cloud"></div>
        </div>
    </div>
    <h1 style="color: yellow; font-family: sans-serif; text-shadow: 2px 2px 4px red; ">Please wait we're finding someone to help you</h1>
    <canvas id="pizza"></canvas>
    <script>
        let toRadians = (deg) => deg * Math.PI / 180
        let map = (val, a1, a2, b1, b2) => b1 + (val - a1) * (b2 - b1) / (a2 - a1)

        class Pizza {
            constructor(id) {
                this.canvas = document.getElementById(id)
                this.ctx = this.canvas.getContext('2d')

                this.sliceCount = 6
                this.sliceSize = 80

                this.width = this.height = this.canvas.height = this.canvas.width = this.sliceSize * 2 + 50
                this.center = this.height / 2 | 0

                this.sliceDegree = 360 / this.sliceCount
                this.sliceRadians = toRadians(this.sliceDegree)
                this.progress = 0
                this.cooldown = 10

            }

            update() {
                let ctx = this.ctx
                ctx.clearRect(0, 0, this.width, this.height)

                if (--this.cooldown < 0) this.progress += this.sliceRadians * 0.01 + this.progress * 0.07

                ctx.save()
                ctx.translate(this.center, this.center)

                for (let i = this.sliceCount - 1; i > 0; i--) {

                    let rad
                    if (i === this.sliceCount - 1) {
                        let ii = this.sliceCount - 1

                        rad = this.sliceRadians * i + this.progress

                        ctx.strokeStyle = '#FBC02D'
                        cheese(ctx, rad, .9, ii, this.sliceSize, this.sliceDegree)
                        cheese(ctx, rad, .6, ii, this.sliceSize, this.sliceDegree)
                        cheese(ctx, rad, .5, ii, this.sliceSize, this.sliceDegree)
                        cheese(ctx, rad, .3, ii, this.sliceSize, this.sliceDegree)

                    } else rad = this.sliceRadians * i

                    // border
                    ctx.beginPath()
                    ctx.lineCap = 'butt'
                    ctx.lineWidth = 11
                    ctx.arc(0, 0, this.sliceSize, rad, rad + this.sliceRadians)
                    ctx.strokeStyle = '#F57F17'
                    ctx.stroke()

                    // slice
                    let startX = this.sliceSize * Math.cos(rad)
                    let startY = this.sliceSize * Math.sin(rad)
                    let endX = this.sliceSize * Math.cos(rad + this.sliceRadians)
                    let endY = this.sliceSize * Math.sin(rad + this.sliceRadians)
                    let varriation = [0.9, 0.7, 1.1, 1.2]
                    ctx.fillStyle = '#FBC02D'
                    ctx.beginPath()
                    ctx.moveTo(0, 0)
                    ctx.lineTo(startX, startY)
                    ctx.arc(0, 0, this.sliceSize, rad, rad + this.sliceRadians)
                    ctx.lineTo(0, 0)
                    ctx.closePath()
                    ctx.fill()
                    ctx.lineWidth = .3
                    ctx.stroke()

                    // meat
                    let x = this.sliceSize * .65 * Math.cos(rad + this.sliceRadians / 2)
                    let y = this.sliceSize * .65 * Math.sin(rad + this.sliceRadians / 2)
                    ctx.beginPath()
                    ctx.arc(x, y, this.sliceDegree / 6, 0, 2 * Math.PI)
                    ctx.fillStyle = '#D84315'
                    ctx.fill()

                }

                ctx.restore()

                if (this.progress > this.sliceRadians) {
                    ctx.translate(this.center, this.center)
                    ctx.rotate(-this.sliceDegree * Math.PI / 180)
                    ctx.translate(-this.center, -this.center)

                    this.progress = 0
                    this.cooldown = 20
                }

            }

        }

        function cheese(ctx, rad, multi, ii, sliceSize, sliceDegree) {
            let x1 = sliceSize * multi * Math.cos(toRadians(ii * sliceDegree) - .2)
            let y1 = sliceSize * multi * Math.sin(toRadians(ii * sliceDegree) - .2)
            let x2 = sliceSize * multi * Math.cos(rad + .2)
            let y2 = sliceSize * multi * Math.sin(rad + .2)

            let csx = sliceSize * Math.cos(rad)
            let csy = sliceSize * Math.sin(rad)

            var d = Math.sqrt((x1 - csx) * (x1 - csx) + (y1 - csy) * (y1 - csy))
            ctx.beginPath()
            ctx.lineCap = 'round'

            let percentage = map(d, 15, 70, 1.2, 0.2)

            let tx = x1 + (x2 - x1) * percentage
            let ty = y1 + (y2 - y1) * percentage
            ctx.moveTo(x1, y1)
            ctx.lineTo(tx, ty)

            tx = x2 + (x1 - x2) * percentage
            ty = y2 + (y1 - y2) * percentage
            ctx.moveTo(x2, y2)
            ctx.lineTo(tx, ty)

            ctx.lineWidth = map(d, 0, 100, 20, 2)
            ctx.stroke()
        }

        let pizza = new Pizza('pizza')

            ; (function update() {
                requestAnimationFrame(update)
                pizza.update()

            }())
         //============== check if order is accpeted =====================
        $(function () {
            setInterval(function () {
                $.getJSON('@Url.Action("waitAccept")', function (message) {
                    if (message == "accepted") {
                        
                        window.location.href = '/Home/Preparing';
                    }
                    else if(message == "decline") {
                        window.location.href = '/Home/Menu#popup1';
                    }
                });
            }, 5000);
        });

    </script>
</body>

